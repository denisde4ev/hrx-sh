#!/bin/sh
set -eu

err() {
	printf %s\\n >&2 "${0##*/}:$1"
	exit "${2-2}"
}
log() {
	printf %s\\n >&2 "${0##*/}: $1"
}



case $# in 0) err "use --help for usage"; esac

case $1 in --help)
printf %s\\n \
"Usage: ${0#*/} c|x|t <-f hrxfile> [-b boundary] [...files]" \
;
exit; esac

case $1 in [!-]*)  set -- -"$@"; esac # first argument is always an option

OPTIND=1;
unset opt_c opt_x opt_t opt_f opt_f_val opt_b opt_b_val
while getopts cxtvf:b: i; do
	case $i in
		c) opt_c='';;
		x) opt_x='';;
		t) opt_t='';;
		v) opt_v='';;
		f) opt_f=''; opt_f_val=$OPTARG;;
		b) opt_b=''; opt_b_val=$OPTARG;;
		?) exit;
	esac
done
shift $((OPTIND - 1))


path_chars_blacklist=$(printf \\x)
in_line() {
	printf %s ", in line $line_num: $line"
}

parsing_err() {
	err "parsing error($1)$(in_line)" "${2-4}"
}

# fns:
hrx_comment() {
	err todo
}

_hrx_parse_boundary() {
	case $1 in
		\<=*\>*) ;;
		*) return 1;;
	esac

	_i=${line#?}
	_i=${_i%%\>*}

	case ${_i} in
		''|*[!=]*) return 1;;
		*) boundary=${_i%%\>*}\>
	esac

	_i=\<${_i}\>
	case $line in
		"$_i"*) boundary=$_i;; # found first boundary
		*) parsing_err 1;;
	esac
}

hrx_parser() {
	line_num=0
	while read -r line; do
		line_num=$((line_num + 1))

		case ${entry_type-} in
		dir)
			case $line in
				'') ;;
				*[!" 	"]*) log "warning: mallformed directory etry$(in_line)";;
			esac
			;;
			
		x)
			err TODO
			hrx_"$entry_type" "$line"
			;;
		*)
			_hrx_parse_boundary "$line" || { # sets 'boundary'
				log "mallformed entry$(in_line)"
			}
			case $line in
				"$boundary") entry_type=comment;;
				"$boundary "?*/) entry_type=dir;;
				"$boundary "?*) entry_type=file;;
				"$boundary ")
					log "warning: comment with space before new line$(in_line)"
					entry_type=comment
				;;
				*) parsing_err 2 1;;
			esac
			
			case ${action-} in dir|file) # parsing var `path`
				path=${line#"$boundary "}
				case $line in "$boundary $path") ;; *)
					parsing_err 3
				esac
				while case $path in /*) ;; *) false; esac; do
					path=${path#/}
				done
				case $path in
				'')
					err "empty file/dir name after trimming path$(in_line)"
					;;
				*["$path_chars_blacklist"]*)
					log "note: found disawolled char$(in_line)"
				esac
			esac

			case ${action-} in
				dir)
			esac
		esac
	done

}




IFS='' # do not trim `read -r line`


case ${opt_b+b} in
	b) boundary=$opt_b_val;;
	*) unset boundary;;
esac

files=0
explisit_dirs=0
main() {
case ${opt_c+c}${opt_x+x}${opt_t+t} in
t)
	err 'hrx -t : NOT IMPLEMENTED, {in progress}'



	#
	;;
c)
	err 'hrx -c : NOT IMPLEMENTED'
	;;
x)
	err 'hrx -x : NOT IMPLEMENTED'
	;;

*)
	err 'specify only one of -c, -x or -t option'
esac
}

case ${opt_f_val-} in -) unset opt_f; esac # if its '-' then same as missing -> read from stdin
# and do not add test for if the stdin is the tty, hrx is human readable and *typeable*

case ${opt_f:+f} in
	f) main "$@" < "$opt_f_val";;
	*) main "$@";;
esac
